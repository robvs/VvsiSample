//  Copyright Â© 2024 Rob Vander Sloot
//

/// `ViewState` for the Category screen.
///
/// This encapsulates the values for the view's dynamic elements, defines the actions that
/// can be taken on the view, and how the view transforms from one state to the next.
class CategoryViewState: ViewState<CategoryViewState.State> {

    /// Encapsulation of values that drive the dynamic elements of the associated view.
    ///
    /// The default values indicate the intended initial state.
    struct State: Equatable {
        let categoryName: String
        var isLoading: Bool = true
        var jokes: [String] = []
        var errorMessage: String?
        var refreshButtonDisabled: Bool = true
    }

    init(categoryName: String) {
        super.init(initialState: State(categoryName: categoryName))
    }
}


// MARK: - State Conformance to ViewStateReducible

extension CategoryViewState.State: ViewStateReducible {

    // MARK: Actions & Effects

    /// Actions generated by the view or by the system.
    /// Typically consumed by the associated view interactor or navigation coordinator.
    enum Action {
        case refreshButtonPressed
    }

    /// Items that designate how the view state should change, usually
    /// the result of an `Action`.
    enum Effect: Equatable {
        /// Indicates that jokes are being fetched.
        case loading

        /// Indicates that loading is complete and the view is ready.
        case getRandomJokesResult(GetRandomJokesResult)
    }

    // MARK: Reducer

    mutating func reduce(with effect: Effect) {
        switch effect {
        case .loading:
            isLoading = true
            jokes = []
            errorMessage = nil
            refreshButtonDisabled = true

        case .getRandomJokesResult(let result):
            switch result {
            case .success(let newJokes):
                isLoading = false
                jokes = newJokes
                errorMessage = nil
                refreshButtonDisabled = false

            case .failure(let error):
                isLoading = false
                errorMessage = error.localizedDescription
                refreshButtonDisabled = false
            }
        }
    }
}
