//  Copyright Â© 2024 Rob Vander Sloot
//

import Combine
import OSLog
import SwiftUI

/// Encapsulation of values that drive the dynamic elements of the associated view.
struct CategoryViewState: Equatable {
    let categoryName: String
    var isLoading: Bool = true
    var jokes: [String] = []
    var errorMessage: String?
    var refreshButtonDisabled: Bool = true

    init(categoryName: String) {
        self.categoryName = categoryName
    }
}

/// Drives updates to the view state.
class CategoryViewAgent: ViewAgent<CategoryViewAgent.Action> {

    // MARK: Action & Effect type definitions

    /// Actions generated by the view or by the system (e.g. ViewInteractor).
    /// Typically handled by the associated interactor, but may also be handled
    /// by the ViewAgent if no interaction with the system is necessary.
    enum Action {
        case refreshButtonPressed
    }

    /// Something that causes the view state to change, usually the result of an `Action`.
    enum Effect {
        /// Indicates that jokes are being fetched.
        case loading

        /// Indicates that loading is complete and the view is ready.
        case getRandomJokesResult(GetRandomJokesResult)
    }

    // MARK: Properties

    /// Object that drives the dynamic elements of the view.
    @Published private (set) var state: CategoryViewState

    // MARK: Object lifecycle

    init(state: CategoryViewState) {
        self.state = state
    }
}


// MARK: - State Reducer

extension CategoryViewAgent {

    /// Handle changes from the current state to the next state.
    @MainActor
    func reduce(with effect: Effect) {
        switch effect {
        case .loading:
            state.isLoading = true
            state.jokes = []
            state.errorMessage = nil
            state.refreshButtonDisabled = true

        case .getRandomJokesResult(let result):
            switch result {
            case .success(let jokes):
                state.isLoading = false
                state.jokes = jokes
                state.errorMessage = nil
                state.refreshButtonDisabled = false

            case .failure(let error):
                state.isLoading = false
                state.errorMessage = error.localizedDescription
                state.refreshButtonDisabled = false
            }
        }
    }
}
