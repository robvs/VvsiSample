//  Copyright Â© 2024 Rob Vander Sloot
//


/// `ViewAgent` for the Category screen. This type definition and
/// initializer is essentially for convenience.
class CategoryViewAgent: ViewAgent<CategoryViewState> {

    init(categoryName: String) {
        super.init(initialState: CategoryViewState(categoryName: categoryName))
    }
}


// MARK: - Definition of base view state properties

/// Encapsulation of values that drive the dynamic elements of the associated view.
struct CategoryViewState: Equatable {

    let categoryName: String
    var isLoading: Bool = true
    var jokes: [String] = []
    var errorMessage: String?
    var refreshButtonDisabled: Bool = true

    init(categoryName: String) {
        self.categoryName = categoryName
    }
}


// MARK: - Actions & Effects

extension CategoryViewState {

    /// Actions generated by the view or by the system.
    /// Typically consumed by the associated view interactor or navigation coordinator.
    enum Action {
        case refreshButtonPressed
    }

    /// Items that designates how the view state should change, usually
    /// the result of an `Action`.
    enum Effect {
        /// Indicates that jokes are being fetched.
        case loading

        /// Indicates that loading is complete and the view is ready.
        case getRandomJokesResult(GetRandomJokesResult)
    }

}

// MARK: - Conformance to ViewStateProtocol

/// Migrating from one state to the next.
extension CategoryViewState: ViewStateProtocol {

    /// Handle changes from the current state to the next state.
    mutating func reduce(with effect: Effect) {
        switch effect {
        case .loading:
            isLoading = true
            jokes = []
            errorMessage = nil
            refreshButtonDisabled = true

        case .getRandomJokesResult(let result):
            switch result {
            case .success(let newJokes):
                isLoading = false
                jokes = newJokes
                errorMessage = nil
                refreshButtonDisabled = false

            case .failure(let error):
                isLoading = false
                errorMessage = error.localizedDescription
                refreshButtonDisabled = false
            }
        }
    }
}
